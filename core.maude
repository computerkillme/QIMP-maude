fmod COMPLEX is
    pr CONVERSION .
    pr EXT-BOOL .

    sorts Real Complex .
    subsort Rat < Real < Complex .

    --- imaginary unit
    op i : -> Complex [ctor] .

    --- basic operators
    op _.*_  : Complex Complex -> Complex [comm assoc prec 32] .
    op _./_  : Complex Complex -> Complex [prec 31] .
    op _.+_  : Complex Complex -> Complex [comm assoc prec 33] .
    op (_)^* : Complex -> Complex [prec 30] .

    --- comparative operators
    op _.>_  : Real Real -> Bool .
    op _.>=_ : Real Real -> Bool .
    op _.<_  : Real Real -> Bool .
    op _.<=_ : Real Real -> Bool .

    --- some functions
    op Abs  : Complex -> Real .
    op Pow  : Complex Rat -> Complex .
    op Sqrt : Complex -> Complex .

    vars R R1 R2 : Rat .
    vars PR PR' : PosRat .
    vars C C1 C2 C3 C4 : Complex .
    var N : Nat .

    --- imaginary properties
    eq i .* i = -1 .
    eq Abs(i) = 1 .
    --- absolute values of postive numbers are positive numbers
    eq Abs((Abs(C))) = Abs(C) .
    eq Abs((Pow(Abs(C), N))) = Pow(Abs(C), N) .
    eq Abs(R) = abs(R) .

    --- Pow properties
    eq Pow(R1, R2) = (R1)^(R2) .

    --- rational number calculation
    eq R1 .* R2 = R1 * R2 .
    eq R1 ./ R2 = R1 / R2 .
    eq R1 .+ R2 = R1 + R2 .
    eq R1 .< R2 = R1 < R2 .
    eq R1 .> R2 = R1 > R2 .
    eq R1 .<= R2 = R1 <= R2 .
    eq R1 .>= R2 = R1 >= R2 .



    --- c . c* = |c|^2
    eq C .* (C)^* = Pow(Abs(C), 2) .

    --- distributive properties
    eq C1 .* (C2 .+ C3) = C1 .* C2 .+ C1 .* C3 .

    --- constructing normal form: R .* C
    ceq (C .* R1 .+ C .* R2) = C .* (R1 .+ R2) if not C :: Rat .
    ceq C .+ R .* C = C .* (R .+ 1) if not C :: Rat .
    ceq C .+ C = C .* 2 if not C :: Rat .

    --- constructing normal form: C1 .* (1 ./ C2)
    ceq C1 ./ C2 = C1 .* (1 ./ C2) if C1 =/= 1 .

    --- multiplicative properties
    eq C .* 1 = C .
    eq C .* 0 = 0 .
    ceq C .* (1 ./ C) = 1 if not C :: Rat .
    ceq 1 ./ (C1 .* C2) = (1 ./ C1) .* (1 ./ C2)
    if not C1 :: Rat or-else not C2 :: Rat .

    --- additive properties
    eq C .+ 0 = C .

    --- division properties
    ceq 1 ./ (1 ./ C) = C if C =/= 0 .

    --- Sqrt calculation
    eq Sqrt(1) = 1 .
    eq Sqrt(0) = 0 .
    eq Sqrt(PR) .* Sqrt(PR) = PR .
    eq 1 ./ Sqrt(PR) .* 1 ./ Sqrt(PR) = 1 ./ PR .
    eq PR .* (1 ./ Sqrt(PR)) = Sqrt(PR) .
    eq Sqrt(PR / PR') = Sqrt(PR) .* (1 ./ Sqrt(PR')) .
    eq Sqrt(PR) .* (R / PR) = R .* (1 ./ Sqrt(PR)) .

    --- transpose of Sqrt
    eq (Sqrt(PR))^* = Sqrt(PR) .
    eq (C1 .* C2)^* = (C1)^* .* (C2)^* .
    eq (C1 ./ C2)^* = (C1)^* ./ (C2)^* .
    eq (C1 .+ C2)^* = (C1)^* .+ (C2)^* .
    eq (R)^* = R .

endfm

fmod DIRAC is
  pr COMPLEX .

  sorts Ket Bra .
  ops |0> |1> : -> Ket [ctor] .
  ops <0| <1| : -> Bra [ctor] .

endfm


fmod MATRIX is
    pr DIRAC .
    sorts Vector Matrix .
    subsort Ket < Vector .
    subsorts Vector Bra < Matrix .

    --- zero matrix
    op O : -> Vector [ctor] .
    op mO : -> Matrix [ctor] .
    --- identity matrix
    op I : -> Matrix [ctor] .
    --- fake matrix
    op nil : -> Matrix [ctor] .
    --- error matrix
    op errM : -> [Matrix] [ctor] .
    --- scalar multiplication with matrix
    op _._ : Complex Vector -> Vector [prec 31] .
    op _._ : Complex Matrix -> Matrix [prec 31] .
    --- matrix addition
    op _+_ : Vector Vector -> Vector [comm assoc prec 33] .
    op _+_ : Matrix Matrix -> Matrix [comm assoc prec 33] .
    --- matrix product
    op _x_ : Matrix Matrix -> Matrix [assoc prec 31] .
    op _x_ : Matrix Vector -> Vector [assoc prec 31] .
    --- tensor product
    op _(x)_ : Vector Vector -> Vector [assoc prec 31] .
    op _(x)_ : Matrix Matrix -> Matrix [assoc prec 31] .
    --- dagger
    op (_)^+ : Matrix -> Matrix [prec 30] .
    --- scalr product
    op SP(_,_) : Vector Vector -> Complex .

    vars M M1 M2 M3 M4 : Matrix .
    vars V V1 V2 V3 : Vector .
    vars C C1 C2 : Complex .
    vars K1 K2 : Ket .
    vars Bra : Bra .

    --- scalar product
    eq SP(V, O) = 0 .
    eq SP(O, V) = 0 .
    eq SP(|0>, |0>) = 1 .
    eq SP(|0>, |1>) = 0 .
    eq SP(|1>, |0>) = 0 .
    eq SP(|1>, |1>) = 1 .
    eq SP(C1 . V1, V2) = (C1)^* .* SP(V1, V2) .
    eq SP(V1, C2 . V2) = C2 .* SP(V1, V2) .
    eq SP(V1 + V2, V3) = SP(V1, V3) .+ SP(V2, V3) .
    eq SP(V1, V2 + V3) = SP(V1, V2) .+ SP(V1, V3) .
    eq SP(K1 (x) V1, K2 (x) V2) = SP(K1, K2) .* SP(V1, V2) .
    eq (SP(V1, V2))^* = SP(V2, V1) .

    --- zero vector
    eq [scalar-O1] : 0 . V = O .
    eq [scalar-O2] : C . O = O .
    eq [add-O1] : O + V = V .
    eq [mul-O1] : M x O = O .
    eq [mul-O2] : mO x V = O .
    eq [tensor-O1] : V (x) O = O .
    eq [tensor-O2] : O (x) V = O .

    --- zero matrix
    eq [scalar-mO1] : 0 . M = mO .
    eq [scalar-mO2] : C . mO = mO .
    eq [add-mO1] : M + mO = M .
    eq [mul-mO1] : M x mO = mO .
    eq [mul-mO2] : mO x M = mO .
    eq [tensor-mO1] : mO (x) M = mO .
    eq [tensor-mO2] : M (x) mO = mO .
    eq [bra-mO1] : O x Bra = mO .
    eq [density-mO1] : O (x) M = mO .
    eq [density-mO2] : M (x) O = mO .
    eq [density-mO3] : M1 (x) O (x) M2 = mO .

    --- nil matrix
    --- [todo] remove nil matrix
    eq [nil-M1] : C . nil = nil .
    eq [nil-M2] : M + nil = M .
    eq [nil-M3] : nil (x) M = M .
    eq [nil-M4] : M (x) nil = M .

    --- identity matrix properties
    eq [mul-I1] : I x M = M .
    eq [mul-I2] : M x I = M .
    
    --- Bra & Ket
    eq [braket1] : <0| x |0> = I .
    eq [braket2] : <1| x |1> = I .
    eq [braket3] : <0| x |1> = O .
    eq [braket4] : <1| x |0> = O .

    --- dagger properties
    eq [dagger-V1] : (O)^+ = O .
    eq [dagger-V2] : (|0>)^+ = <0| .
    eq [dagger-V3] : (|1>)^+ = <1| .
    eq [dagger-V4] : (C . V)^+ = ((C)^*) . (V)^+ .
    eq [dagger-V5] : (V1 + V2)^+ = (V1)^+ + (V2)^+ .
    eq [dagger-V6] : (V1 (x) V2)^+ = (V1)^+ (x) (V2)^+ .
    eq [dagger-V7] : ((V)^+)^+ = V .

    eq [dagger-M1] : (mO)^+ = mO .
    eq [dagger-M2] : (I)^+ = I .
    eq [dagger-M3] : (<0|)^+ = |0> .
    eq [dagger-M4] : (<1|)^+ = |1> .
    eq [dagger-M5] : (C . M)^+ = ((C)^*) . (M)^+ .
    eq [dagger-M6] : (M1 + M2)^+ = (M1)^+ + (M2)^+ .
    eq [dagger-M7] : (M1 x M2)^+ = (M2)^+ x (M1)^+ .
    eq [dagger-M8] : (M1 (x) M2)^+ = (M1)^+ (x) (M2)^+ .
    eq [dagger-M9] : ((M)^+)^+ = M .

    --- multiplication distributes over addition
    eq [dist-mul-V1] : M x (V1 + V2) = M x V1 + M x V2 .
    eq [dist-mul-V2] : (M1 + M2) x V = M1 x V + M2 x V .

    eq [dist-mul-M1] : M1 x (M2 + M3) = M1 x M2 + M1 x M3 .
    eq [dist-mul-M2] : (M1 + M2) x M3 = M1 x M3 + M2 x M3 .

    --- scalar normal forms
    eq [scalar-V1] : 1 . V = V .
    eq [scalar-V2] : C1 . (C2 . V) = (C1 .* C2) . V .
    eq [scalar-V3] : C . (V1 + V2) = C . V1 + C . V2 .

    eq [scalar-M1] : 1 . M = M .
    eq [scalar-M2] : C1 . (C2 . M) = (C1 .* C2) . M .
    eq [scalar-M3] : C . (M1 + M2) = C . M1 + C . M2 .

    --- additive normal forms
    eq [add-V1] : V + V = 2 . V .
    eq [add-V2] : (C . V) + V = (C .+ 1) . V .
    eq [add-V3] : (C1 . V) + (C2 . V) = (C1 .+ C2) . V .

    eq [add-M4] : M + M = 2 . M .
    eq [add-M3] : (C . M) + M = (C .+ 1) . M .
    eq [add-M2] : (C1 . M) + (C2 . M) = (C1 .+ C2) . M .
    
    --- multiplicative normal forms
    eq [mul-MV1] : (C . M) x V = C . (M x V) .
    eq [mul-MV2] : M x (C . V) = C . (M x V) .
    eq [mul-MV3] : (M1 (x) M2) x (V1 (x) V2) = (M1 x V1) (x) (M2 x V2) .

    eq [mul-MM1] : (C . M1) x M2 = C . (M1 x M2) .
    eq [mul-MM2] : M1 x (C . M2) = C . (M1 x M2) .
    eq [mul-MM3] : (M1 (x) M2) x (M3 (x) M4) = (M1 x M3) (x) (M2 x M4) .
    
    --- tensor product normal forms
    eq [tensor-V1] : (C . V1) (x) V2 = C . (V1 (x) V2) .
    eq [tensor-V2] : V1 (x) (C . V2) = C . (V1 (x) V2) .
    
    eq [tensor-M1] : (C . M1) (x) M2 = C . (M1 (x) M2) .
    eq [tensor-M2] : M1 (x) (C . M2) = C . (M1 (x) M2) .
    
    --- tensor distributes over addition
    eq [dist-tensor-V1] : V1 (x) (V2 + V3) = V1 (x) V2 + V1 (x) V3 .
    eq [dist-tensor-V2] : (V1 + V2) (x) V3 = V1 (x) V3 + V2 (x) V3 .

    eq [dist-tensor-M1] : M1 (x) (M2 + M3) = M1 (x) M2 + M1 (x) M3 .
    eq [dist-tensor-M2] : (M1 + M2) (x) M3 = M1 (x) M3 + M2 (x) M3 .

    --- basic matrices
    ops B0 B1 B2 B3 P0 P1 : -> Matrix .
    eq B0 = |0> x <0| .
    eq B1 = |0> x <1| .
    eq B2 = |1> x <0| .
    eq B3 = |1> x <1| .
    eq P0 = B0 .
    eq P1 = B3 .

    --- basic gates
    ops X Y Z H S T CX CY CZ SWAP CCX CCZ CSWAP : -> Matrix .
    eq X = B1 + B2 .
    eq Y = ((-1) .* i) . B1 + i . B2 .
    eq Z = B0  + (-1) . B3 .
    eq H = 1 ./ Sqrt(2) . B0 + 1 ./ Sqrt(2) . B1 + 1 ./ Sqrt(2) . B2 + (-1) ./ Sqrt(2) . B3 .
    eq S = B0 + i . B3 .
    eq T = B0 + ((1 + i) ./ Sqrt(2)) . B3 .
    eq CX = B0 (x) I + B3 (x) X .
    eq CY = B0 (x) I + B3 (x) Y .
    eq CZ = B0 (x) I + B3 (x) Z .
    --- SWAP(N1, N2) = CX(N1, N2) x CX(N2, N1) x CX(N1, N2)
    eq SWAP = (B0 (x) I + B3 (x) X) x (I (x) B0 + X (x) B3) x (B0 (x) I + B3 (x) X) .
    --- CCX = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B1 + B3(x)B3(x)B2
    eq CCX = B0 (x) I (x) I + B3 (x) CX . 
    --- CCZ = B0(x)I(x)I + B3(x)B0(x)I + B3(x)B3(x)B0 + (-1) . B3(x)B3(x)B3
    eq CCZ = B0 (x) I (x) I + B3 (x) CZ . 
    --- CSWAP = B0(x)I(x)I + B3(x)B0(x)B0 + B3(x)B1(x)B2 + B3(x)B2(x)B1 + B3(x)B3(x)B3
    eq CSWAP = B0 (x) I (x) I + B3 (x) SWAP .
endfm

